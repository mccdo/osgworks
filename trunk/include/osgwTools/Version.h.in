//
// This file is automatically generated. To make changes, edit
// Version.h.in, then reconfigure using CMake. This will generate
// a new Version.h file contaiig your changes.
//


#ifndef __${_projectNameUpper}_CMAKE_GENERATED_VERSION_H__
#define __${_projectNameUpper}_CMAKE_GENERATED_VERSION_H__ 1



/** \defgroup Version Version utilities */
/*@{*/

#define ${_projectNameUpper}_MAJOR_VERSION (${${_projectNameUpper}_MAJOR_VERSION})
#define ${_projectNameUpper}_MINOR_VERSION (${${_projectNameUpper}_MINOR_VERSION})
#define ${_projectNameUpper}_SUB_VERSION (${${_projectNameUpper}_SUB_VERSION})

/** \brief ${CMAKE_PROJECT_NAME} version number as an integer

C preprocessor integrated version number
The form is Mmmss, where:
   \li M is the major version
   \li mm is the minor version (zero-padded)
   \li ss is the sub version (zero padded)

Use this in version-specific code, for example:
\code
   #if( ${_projectNameUpper}_VERSION < 10500 )
      ... code specific to releases before v1.05
   #endif
\endcode
*/
#define ${_projectNameUpper}_VERSION ( \
        ( ${_projectNameUpper}_MAJOR_VERSION * 10000 ) + \
        ( ${_projectNameUpper}_MINOR_VERSION * 100 ) + \
        ${_projectNameUpper}_SUB_VERSION )


/** \brief ${CMAKE_PROJECT_NAME} version number as a const char*.

Example:
\code
${CMAKE_PROJECT_NAME} version 1.01.00 (10100)
\endcode
*/
#define ${_projectNameUpper}_VERSION_STRING "${CMAKE_PROJECT_NAME} version ${${_projectNameUpper}_VERSION} (${${_projectNameUpper}_VERSION_COMPACT})"

/*@}*/


// __${_projectNameUpper}_CMAKE_GENERATED_VERSION_H__
#endif



The osgWorks Polygon Decimation tools reduce scene graph geometry. The decimation process output is a simplified geometric representation suitable for use as a Bullet triangle mesh collision shape, and not necessarily suitable for visual display.

We've created an infrastructure that allows generic operations on an osg::Geometry object. The GeometryModifier class is a NodeVisitor with a reference to a GeometryOperation object. The GeometryModifier calls the GeometryOperation for every Geometry object in the scene graph.

To use the GeometryModifier, you create and configure a GeometryOperation subclass and pass it to the GeometryModifier constructor. Then call accept() to invoke the GeometryModifier visitor on your scene graph.

In essence, the GeometryModifier itself is somewhat uninteresting. The subclasses (specializations) of GeometryOperation perform the actual geometric reduction. We've created three subclasses, which are

 * SimplifierOp
 * DecimatorOp
 * ReducerOp
The following is each subclass behavior.

*SimplifierOp*

This is a wrapper around the osgUtil::Simplifier. It invokes the Simplifier on the current Geometry and serves as a baseline test for the overall GeometryModifier infrastructure. It should produce identical results to running the Simplifier, and doesn't provide any additional features beyond what the Simplifier provides.

As background information, the Simplifier uses the edge collapse algorithm to reduce vertex and triangle count. It only modifies interior vertices and doesn't affect edge geometry.

[http://osgworks.googlecode.com/svn/wiki/Doxygen_geom-edgecollapse.jpg] 

_ (Figure description: _*The osgUtil::Simplifier edge collapse algorithm.* Starting with the mesh on the left, consisting of ten triangles and ten vertices, the Simplifier selects the two highlighted vertices and triangles, and collapses the edge between them, introducing a new vertex. The resulting simplified mesh consists of eight triangles and nine vertices.)

*DecimatorOp*

The DecimatorOp is a modification of the Simplifier that uses the half-edge collapse algorithm and performs operations on edge geometry. Unlike the edge collapse algorithm, the half-edge collapse removes vertices without computing and introducing new vertices. Combined with the ability to operate on edge geometry, the DecimatorOp is a more general decimation tool than the SimplifierOp.

[http://osgworks.googlecode.com/svn/wiki/Doxygen_geom-halfedgecollapse.jpg] 

_(Figure description:_ *The DecimatorOp half-edge collapse algorithm.* Initially, the algorithm selects three edges for collapse, and removes one vertex from each of the three edges, leaving six triangles and seven vertices. In the second iteration, the algorithm selects a final edge for collapse and removes one of its vertices, leaving four triangles and six vertices.)

The DecimatorOp features the following control parameters: 

The DecimatorOp differs from the osgUtil::Simplifier in the following functional areas:



*ReducerOp*

The ReducerOp is an alternative to the DecimatorOp based on concepts described here: [http://www.cg.tuwien.ac.at/courses/Seminar/SS2002/Knapp_paper.pdf http://www.cg.tuwien.ac.at/courses/Seminar/SS2002/Knapp_paper.pdf]

For each vertex, the set of triangles sharing that vertex is considered. The set of triangles is broken into multiple groups based on the group threshold. If the vertex is within the center of a group, the algorithm removes that vertex. If the vertex is on the edge of a group, the algorithm removes it if the boundary edges do not exceed the maximum edge error. In either case, if the algorithm removes the vertex, we triangulate the remaining vertices from the triangle to preserve the vertex winding order.

[http://osgworks.googlecode.com/svn/wiki/Doxygen_geom-reducergroup.jpg] 

_(Figure description:_ *ReducerOp group algorithm.* The set of triangles on the left all share a common vertex (gray highlight), but have different normals (the triangle color indicates this). ReducerOp groups triangles together if their normals are within the group threshold. In this case, it identifies two groups, as the center image shows. ReducerOp then considers each group individually to determine if the current vertex is removable, as those on the right show.)

[http://osgworks.googlecode.com/svn/wiki/Doxygen_geom-reducerremove.jpg] 

_(Figure description: _ *ReducerOp vertex removal.* For each group, ReducerOp determines whether the current vertex is completely contained (left) or on an edge (right). If completely contained, ReducerOp removes the vertex. If on an edge, ReducerOp calculates the angle subtended by the adjacent boundary edges. If the angle is less than the max error edge, the vertex is removed. In either case, when a vertex is removed, ReducerOp triangulates the remaining vertices arbitrarily, but in such a way as to preserve vertex winding order.)

ReducerOp features the following controls:

Group threshold. Triangles form a group when they share one or more vertices and when their normals differ by less than this specified angle in degrees. The default is ten degrees. Max edge error. ReducerOp only removes a vertex from the edge of a triangle group if the angle the group boundary edges subtends differs by less than this specified angle in degrees. The default is ten degrees. Remove degenerate and redundant triangles. If set to true, ReducerOp removes degenerate triangles (triangles with less than three unique vertices) and redundant triangles (triangles that appear more than once). If set to false, ReducerOp does not remove vertices referenced by degenerate and redundant triangles reference.

_ReducerOp Limitations_

ReducerOp only operates on Geometry objects with Vec3Array-type vertices, and DrawElementsUInt PrimitiveSets with TRIANGLES mode. This limits the scene graphs ReducerOp can operate on, and this limitation will be removed in a future release of osgWorks.

If ReducerOp currently fails a test case, you can demonstrate it with the following command:

`DecimatorDemo-reducer` `dectest32.osg` 

_Comparing ReducerOp to DecimatorOp_

The ReducerOp removes vertices by removing indexes from the OSG PrimitiveSet, and does not remove vertices from the VertexArray. As a result, ReducerOp is extremely fast compared to the DecimatorOp. We currently do not understand why DecimatorOp is slow, but it is comparable in performance to SimplifierOp.

DecimatorOp lets the app specify a desired percentage, and it removes as many vertices as needed to achieve that percentage goal. ReducerOp does not provide this interface, and instead only removes vertices the specified thresholds allow. As a result, DecimatorOp can negatively impact the visual appearance of models when it runs aggressively, whereas ReducerOp generally does a better job of preserving model appearance. 


---
|| [Doxygen Main Page] || [Doxygen_files Files] ||
